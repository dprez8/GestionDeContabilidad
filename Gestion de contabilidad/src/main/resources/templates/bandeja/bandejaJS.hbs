const bandeja = {
    template: `{{> bandeja/bandejaHTML.hbs}}`,
    data() {
        return {
            mensajes: [],
            mensajesFiltradosOrdenados: [],
            selected: null,
            loading: true,
            ordenar: null,
            filtrar: null
        }
    },
    methods: {
        convertDate: convertDate,
        seleccionarMensaje() {
            var id = this.$route.params.id;
            this.selected = id;
            this.marcarVistoAPI();
        },
        marcarVistoAPI() {
            if(this.getMessageSelected() == null) {
                return;
            }

            this.getMessageSelected().leido = true;

            var mensajeToSend = {
                id: this.getMessageSelected().id
            }
            
            var request = {
                url: "http://{{ ip }}/api/bandeja/visto",
                type: "POST",
                context: this,
                data: JSON.stringify(mensajeToSend),
                success(data) {
                    if(data.code == 200) {
                        console.log(data);
                    }
                    else if(data.code == 403) {
                        app.showSessionEndedAlert(true);
                    }
                    else {
                        app.createCommonErrors(data);
                    }
                },
                error(data) {
                    app.createCommonErrors(data);
                },
                complete() {

                }
            };
            $.ajax(request);
        },
        cargarMensajesAPI() {
            this.loading = true;
            var request = {
                url: "http://{{ ip }}/api/bandeja",
                type: "GET",
                context: this,
                success(data) {
                    if(data.code == 200) {
                        if(data.mensajes != undefined) {
                            this.mensajes = data.mensajes;
                            this.ordenarFiltrarMensajes();
                        }
                    }
                    else if(data.code == 403) {
                        app.showSessionEndedAlert(true);
                    }
                    else if(data.code == 404) {
                        this.mensajes = [];
                    }
                    else {
                        app.createCommonErrors(data);
                    }
                },
                error(data) {
                    app.createCommonErrors(data);
                },
                complete(data) {
                    this.loading = false;
                }
            };
            $.ajax(request);
        },
        getMessageSelected() {
            var mensajeSeleccionado = null;
            for(var i = 0; i < this.mensajes.length; i++) {
                if(this.mensajes[i].id == this.selected) {
                    mensajeSeleccionado = this.mensajes[i];
                }
            }
            return mensajeSeleccionado;
        },
        ordenarPorFecha(mensajeA, mensajeB) {
            if (mensajeA.fechaCreacion > mensajeB.fechaCreacion)
                return -1;
            if (mensajeA.fechaCreacion < mensajeB.fechaCreacion)
                return 1;
            return 0;
        },
        ordenarPorNoLeidos(mensajeA, mensajeB) {
            if (mensajeA.leido < mensajeB.leido)
                return -1;
            if (mensajeA.leido > mensajeB.leido)
                return 1;
            return 0;
        },
        filtrarSoloLeidos(mensaje) {
            return mensaje.leido;
        },
        filtrarSoloNoLeidos(mensaje) {
            return !mensaje.leido;
        },
        ordenarFiltrarMensajes() {
            var filtro = function(){return 1};
            var ordenador = function(){};

            switch(this.filtrar) {
                case "leidos":
                    filtro = this.filtrarSoloLeidos;
                    break;
                case "no leidos":
                    filtro = this.filtrarSoloNoLeidos;
                    break;
            }
            switch(this.ordenar) {
                case "fecha":
                    ordenador = this.ordenarPorFecha;
                    break;
                case "no leidos":
                    ordenador = this.ordenarPorNoLeidos;
                    break;
            }

            var bandejaFiltrada = this.mensajes.filter(filtro);
            var bandejaOrdenada = bandejaFiltrada.sort(ordenador);

            this.mensajesFiltradosOrdenados = bandejaOrdenada;
        }
    },
    watch: {
        $route(to, from) {
            this.seleccionarMensaje()
        },
        ordenar() {
            this.ordenarFiltrarMensajes()
        },
        filtrar() { 
            this.ordenarFiltrarMensajes()
        }
    },
    mounted() {
        this.cargarMensajesAPI();
        this.seleccionarMensaje();
    }
};