<!DOCTYPE html>
<html lang="es">
    <head>
        {{> head.hbs}}
    </head>
    <body cz-shortcut-listen="true">
        <link type="text/css" rel="stylesheet" href="http://{{ ip }}/css/navbar.css"/>
        <link type="text/css" rel="stylesheet" href="http://{{ ip }}/css/simple-sidebar.css"/>
        <link type="text/css" rel="stylesheet" href="http://{{ ip }}/css/dropdown.css"/>
        <link type="text/css" rel="stylesheet" href="http://{{ ip }}/css/transitions.css"/>
        <link type="text/css" rel="stylesheet" href="http://{{ ip }}/css/criterio.css"/>
        <!-- Panel -->
        <div id="panel">
            <!-- Navbar -->
            <nav class="navbar navbar-expand-md navbar-light bg-light border-bottom d-flex flex-nowrap">
                <button class="navbar-toggler border-0 p-1 mr-2" data-toggle="collapse" v-on:click="sidebarShow = !sidebarShow">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <!-- Nombre de organizacion -->
                <div id="navbar-organizacion" class="navbar-brand mr-2" v-bind:class="{'hide-organizacion': searchSelected}">
                    <img src="http://{{ ip }}/img/utn_logo.png" width="30" height="30" class="d-inline-block align-top" alt="">
                    <span class="p-2">Organizaci칩n</span>
                </div>
                <!-- Busqueda -->
                <form id="search-wrapper" v-bind:class="{'show-search': searchSelected}" v-on:submit.prevent="search()">
                    <b-input-group class="mr-2" style="flex-wrap: nowrap">
                        <b-input-group-prepend>
                            <b-button variant="outline" class="border-secondary" type="submit"
                                v-model="query" 
                                v-on:focus="searchSelected = true" 
                                v-on:blur="searchSelected = false"
                            ><b-icon-search></b-icon-search></b-button>
                        </b-input-group-prepend>
                        <b-form-input class="border-secondary" placeholder="Buscar"
                            v-model="query" 
                            v-on:focus="searchSelected = true" 
                            v-on:blur="searchSelected = false"
                        ></b-form-input>
                    </b-input-group>
                </form>
                <!-- Avatar -->
                <div class="ml-auto" v-b-toggle.user-content>
                    <b-avatar variant="primary" text="J" src="http://{{ ip }}/img/usuarios/user.png"></b-avatar>
                </div>
                <!-- Panel de opciones de usuario -->
                <b-collapse class="shadow-lg" id="user-content" class="p-2">
                    <b-list-group>
                        <b-list-group-item>Javier</b-list-group-item>
                        <b-list-group-item to="/configuracion" v-b-toggle.user-content>
                                <b-icon-gear-fill class="mr-2"></b-icon-gear-fill> Configuraci칩n
                        </b-list-group-item>
                        <b-list-group-item v-b-toggle.user-content>
                            <b-icon-box-arrow-left class="mr-2"></b-icon-box-arrow-left> Cerrar sesi칩n
                        </b-list-group-item>
                    </b-list-group>
                </b-collapse>
            </nav>
            <!-- /#navbar-wrapper -->

            <div class="d-flex" v-bind:class="{toggled: !sidebarShow}" id="wrapper">
                <!-- Sidebar -->
                <div class="bg-light border-right" id="sidebar-wrapper">
                    <div class="list-group list-group-flush">
                        <template v-for="(page, index) in sidebar">
                            <router-link class="list-group-item list-group-item-action bg-light"
                                v-on:click.native="sidebarShow = true"
                                v-bind:to="page.path"
                            >\{{ page.label }}</router-link>
                        </template>
                    </div>
                </div>
                <!-- /#sidebar-wrapper -->

                <!-- Rightside -->
                <div class="w-100">
                    <!-- Breadcrum -->
                    <b-breadcrumb class="m-0 border-bottom" style="border-radius: 0;">
                        <b-breadcrumb-item>
                            <router-link to="/">
                                <b-icon icon="house-fill" scale="1.25" shift-v="1.25" aria-hidden="true"></b-icon>
                            </router-link>
                        </b-breadcrumb-item>
                        <template v-for="(page, index) in breadcrumb">
                            <b-breadcrumb-item>
                                <router-link v-bind:to="page.path" v-bind:active="page.active">
                                    \{{ page.label }}
                                </router-link>
                            </b-breadcrumb-item>
                        </template>
                    </b-breadcrumb>
                    <!-- /$breadcrum-wrapper -->

                    <!-- Page Content -->
                    <div class="container-fluid overflow-auto" style="height: calc(100vh - 106px)">
                        <transition name="fade" mode="out-in">
                            <router-view></router-view>
                        </transition>
                    </div>
                    <!-- /#page-content-wrapper -->
                </div>
                <!-- /#rightside-wrapper -->

            </div>
            <!-- /#wrapper -->
        </div>
        <!-- /#panel-wrapper -->

        <script>
            const error404 = {
                template: `{{> 404.hbs}}`
            };
            const inicio = {
                template: `{{> inicio.hbs}}`
            };
            const criterio = {
                name: 'criterio',
                template: `{{> criterio.hbs}}`,
                props: {
                    criterio: Object,
                    seleccionoCategoria: Function
                },
                data() {
                    return {
                        isOpen: false
                    }
                }
            };
            const asociarCategoria = {
                template: `{{> asociarCategoria.hbs}}`,
                props: {
                    confirmarAccion: Function,
                    cancelarAccion: Function
                },
                data() {
                    return {
                        criterios: [
                            {
                                id: "1",
                                name: "Alcance del proyecto",
                                criterios: [
                                    {
                                        id: "2",
                                        name: "Tama침o del proyecto",
                                        criterios: [],
                                        categorias: [
                                            {
                                                name: "Grande"
                                            },
                                            {
                                                name: "Chico"
                                            }
                                        ]
                                    }
                                ],
                                categorias: [
                                    {
                                        name: "Nacional"
                                    },
                                    {
                                        name: "Internacional"
                                    }
                                ]
                            },
                            {
                                id: "3",
                                name: "Clientes",
                                criterios: [
                                    {
                                        id: "4",
                                        name: "Mayoristas",
                                        criterios: [],
                                        categorias: [
                                            {
                                                name: "Carrefour"
                                            },
                                            {
                                                name: "Coto"
                                            },
                                            {
                                                name: "La Serenisima"
                                            }
                                        ]
                                    },
                                    {
                                        id: "5",
                                        name: "Minoristas",
                                        criterios: [],
                                        categorias: [
                                            {
                                                name: "Pollos Hermanos"
                                            },
                                            {
                                                name: "Banco comafi"
                                            }
                                        ]
                                    }
                                ],
                                categorias: []
                            }
                        ],
                        categoriasSeleccionadas: []
                    }
                },
                methods: {
                    seleccionoCategoria(criterio, selected) {
                        if(selected)
                            this.categoriasSeleccionadas.push(criterio);
                        else {
                            var index = this.categoriasSeleccionadas.indexOf(criterio);
                            this.categoriasSeleccionadas.splice(index, 1);
                        }
                    }
                },
                components: {
                    'criterio': criterio
                }
            };
            const asociarIngreso = {
                template: `{{> asociarIngreso.hbs}}`,
                props: {
                    confirmarAccion: Function,
                    cancelarAccion: Function
                },
                data() {
                    return {

                    }
                }
            }
            const operaciones = {
                data() {
                    return {
                        campos_egreso: [
                            { key: 'name', label: 'Egreso' },
                            { key: 'validado', label: 'Estado validaci칩n' },
                            { key: 'total', label: 'Total' },
                            { key: 'emitido', label: 'Emitido' },
                            'show_details'
                        ],
                        items_egreso: [
                            { 
                                name: 'Egreso 1234', 
                                validado: true, 
                                total: 42234, 
                                emitido: "12/12/2020", 
                                detalle: { 
                                    items_proveedor: [
                                        {   
                                            name: 'Un proveedor', 
                                            documento: "12345678", 
                                            id: "1234", 
                                            detalle: {
                                            }
                                        }
                                    ],
                                    items_mediodepago: [
                                        {   
                                            name: 'Efectivo', 
                                            total: '12345',
                                            id: "1234",
                                            detalle: {

                                            }
                                        },
                                    ],
                                    items_itemsegreso: [
                                        {   name: 'Un producto', 
                                            quantity: 3, 
                                            price: 1234 
                                        },
                                    ],
                                    items_documentocomercial: [
                                        {   
                                            id: '1234' 
                                        },
                                    ]
                                } 
                            },
                        ],
                        campos_proveedor: [
                            { key: 'name', label: 'Raz칩n Social' },
                            { key: 'documento', label: 'Documento' },
                            { key: 'see_more', label: 'Ver detalle' },
                        ],
                        campos_mediodepago: [
                            { key: 'name', label: 'Medio' },
                            { key: 'total', label: 'Total' },
                        ],
                        campos_documentocomercial: [
                            { key: 'see_more', label: 'Ver Documento' },
                        ],
                        campos_itemsegreso: [
                            { key: 'name', label: 'Producto' },
                            { key: 'quantity', label: 'Cantidad' },
                            { key: 'price', label: 'Precio' },
                        ]
                    }
                },
                components: {
                    'asociar-categoria': asociarCategoria
                },
                template: `{{> operaciones.hbs}}`
            };
            const bandeja = {
                template: `{{> bandeja.hbs}}`,
                data() {
                    return {
                        mensajes: [],
                        selected: null
                    }
                },
                methods: {
                    convertDate: convertDate,
                    seleccionarMensaje() {
                        var id = this.$route.params.id;
                        this.selected = id;
                    },
                    cargarMensajesAPI(bandeja) {
                        $.ajax({
                            url: "http://{{ ip }}/api/bandeja",
                            type: "GET",
                            success(data) {
                                if(data.code == 200) {
                                    
                                    bandeja.mensajes = data.mensajes;
                                }
                                else {
                                    console.log("error");
                                    console.log(data)
                                }
                            },
                            error(data) {
                                console.log("oof");
                                console.log(data);
                            },
                            complete(data) {
                                console.log(this);
                            }
                        });
                    },
                    getMessageSelected() {
                        var mensajeSeleccionado = null;
                        for(var i = 0; i < this.mensajes.length; i++) {
                            if(this.mensajes[i].id == this.selected) {
                                mensajeSeleccionado = this.mensajes[i];
                            }
                        }
                        return mensajeSeleccionado;
                    }
                },
                watch: {
                    $route(to, from) {
                        this.seleccionarMensaje()
                    }
                },
                mounted() {
                    this.cargarMensajesAPI(this);
                    this.seleccionarMensaje();
                }
            };
            const configuracion = {
                template: `{{> configuracion.hbs}}`
            };
            const agregarProveedor = {
                template: `{{> agregarProveedor.hbs}}`,
                props: {
                    confirmarAccion: Function,
                    cancelarAccion: Function
                },
                data() {
                    return {
                        proveedor: {
                            nombre: "",
                            documento: "",
                            direccionPostal: {
                                pais: null,
                                provincia: null,
                                ciudad: null,
                                calle: "",
                                altura: "",
                                piso: "",
                                codigoPostal: ""
                            }
                        },
                        paises: [
                            {value: 1, text: "Argentina"}
                        ],
                        provincias: [],
                        ciudades: []
                    }
                },
                watch: {
                    proveedor() {
                        console.log("changed");
                    }
                }
            };
            const agregarEgreso = {
                template: `{{> agregarEgreso.hbs}}`,
                data() {
                    return {
                        egreso: {
                            fecha: null,
                            proveedor: null,
                            medioDePago: {
                                id: null,
                                dato: null
                            },
                            documentoComercial: {
                                tipo: null,
                                numeroDocumento: null,
                                fechaDePedido: null,
                                fechaDeEntrega: null,
                                descripcion: null,
                                imagenDelDocumento: null
                            },
                            items: [
                                { nombreProducto: 'Cocacola', cantidad: 3, precio: 1234 },
                                { nombreProducto: 'Pepsi', cantidad: 2, precio: 2222 },
                                { nombreProducto: 'Un producto', cantidad: 3, precio: 1234 },
                                { nombreProducto: "", cantidad: "", precio: "" }
                            ]
                        },
                        campos_items: [
                            { key: 'nombreProducto', label: 'Producto', tdClass: ['w-75'] },
                            { key: 'cantidad', label: 'Cantidad', tdClass: [], thClass: ['text-center'] },
                            { key: 'precio', label: 'Precio', tdClass: ['w-25'], thClass: ['text-center'] },
                            { key: 'delete', label: '', tdClass: [], thClass: ['text-center'] }
                        ],
                        proveedoresSelect: [
                            { value: 1, text: "Roberto Samuel"}
                        ],
                        mediosDePagoSelect: [
                            { value: 1, text: "Tarjeta de D칠bito", type: "credit_card"},
                            { value: 2, text: "Tarjeta de Cr칠dito", type: "debit_card"},
                            { value: 3, text: "Cheque", type: "cheque"},
                            { value: 4, text: "Efectivo", type: "cash"}
                        ],
                        mediosDePagoType: {
                            credit_card: []
                        },
                        tipoDocumentoSelect: [
                            { value: 1, text: "Factura A"},
                            { value: 2, text: "Factura B"},
                            { value: 3, text: "Factura C"}
                        ],
                        proveedorAAgregar: null,
                        categoriasAAsociar: [],
                    }
                },
                methods: {
                    confirmar() {
                        if(this.proveedorAAgregar != null) {
                            // Hay que agregar un proveedor antes de agregar el egreso
                            console.log("POST '/api/proveedor'");
                            console.log(JSON.stringify(this.proveedorAAgregar, null, 4));
                        }

                        console.log("POST '/api/operaciones/egreso'");
                        console.log(JSON.stringify(this.egreso, null, 4));

                        if(this.categoriasAAsociar.length) {
                            // Hay que crear el egreso y luego asociarlo a estas categorias
                            console.log("POST 'nose xd'");
                            console.log(JSON.stringify(this.categoriasAAsociar, null, 4));
                        }
                    },
                    checkIfAddItem() {
                        var items = this.egreso.items;
                        var lastItemIndex = items.length - 1;
                        var lastItem = items[lastItemIndex];
                        
                        if (lastItem == undefined         ||
                            lastItem.nombreProducto != "" ||
                            lastItem.cantidad != ""       ||
                            lastItem.precio != ""
                        ) { 
                            return true;
                        }
                        return false;
                    },
                    addItem() {
                        if(this.checkIfAddItem()) {
                            this.egreso.items.push({ nombreProducto: "", cantidad: "", precio: "" });
                        }
                    },
                    deleteItem(index) {
                        this.egreso.items.splice(index, 1);
                        this.addItem();
                    },
                    confirmarNuevoProveedor(data) {
                        this.$bvModal.hide('modal-agregar-proveedor');
                        console.log(data);

                        this.proveedorAAgregar = data;
                        this.egreso.proveedor = "nuevoProveedor";
                    },
                    cancelarNuevoProveedor() {
                        this.$bvModal.hide('modal-agregar-proveedor');
                    },
                    confirmarAsociarCategorias(data) {
                        this.$bvModal.hide('modal-asociar-categoria');
                        console.log(data);

                        this.categoriasAAsociar = data;
                    },
                    cancelarAsociarCategorias() {
                        this.$bvModal.hide('modal-asociar-categoria');
                    }
                },
                components: {
                    'asociar-categoria': asociarCategoria,
                    'asociar-ingreso': asociarIngreso,
                    'agregar-proveedor': agregarProveedor
                },
                watch: {
                   'egreso.medioDePago.id': function(medioDePagoId) {
                       
                   } 
                } 
            };

            const router = new VueRouter({
                routes: [
                    {
                        name: 'inicio',
                        path: '/',
                        component: inicio,
                        meta: {
                            breadcrumb: []
                        }
                    },
                    {
                        name: 'operaciones',
                        path: '/operaciones',
                        component: operaciones,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Operaciones",
                                    type: "fixed",
                                    path: "/operaciones",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'egresos',
                        path: '/operaciones/egreso',
                        component: operaciones,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Operaciones",
                                    type: "fixed",
                                    path: "/operaciones"
                                },
                                {
                                    label: "Egresos",
                                    type: "fixed",
                                    path: "/operaciones/egreso",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'agregarEgreso',
                        path: '/operaciones/egreso/agregar',
                        component: agregarEgreso,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Operaciones",
                                    type: "fixed",
                                    path: "/operaciones"
                                },
                                {
                                    label: "Egresos",
                                    type: "fixed",
                                    path: "/operaciones/egreso"
                                },
                                {
                                    label: "Agregar",
                                    type: "fixed",
                                    path: "/operaciones/egreso/agregar",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'egreso',
                        path: '/operaciones/egreso/:id',
                        component: operaciones,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Operaciones",
                                    type: "fixed",
                                    path: "/operaciones"
                                },
                                {
                                    label: "Egreso",
                                    type: "fixed",
                                    path: "/operaciones/egreso"
                                },
                                {
                                    label: "id",
                                    type: "dynamic",
                                    path: "/operaciones/egreso/id",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'bandeja',
                        path: '/bandeja',
                        component: bandeja,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Bandeja de mensajes",
                                    type: "fixed",
                                    path: "/bandeja",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'mensaje',
                        path: '/bandeja/:id',
                        component: bandeja,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Bandeja de mensajes",
                                    type: "fixed",
                                    path: "/bandeja"
                                },
                                {
                                    label: "id",
                                    type: "dynamic",
                                    path: "/bandeja/id",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'configuracion',
                        path: '/configuracion',
                        component: configuracion,
                        meta: {
                            breadcrumb: [
                                {
                                    label: "Configuracion",
                                    type: "fixed",
                                    path: "/configuracion",
                                    active: true
                                }
                            ]
                        }
                    },
                    {
                        name: 'error404',
                        path: '/*',
                        component: error404
                    }
                ],
                mode: 'history'
            });

            var app = new Vue({
                el: "#panel",
                data: {
                    sidebar: [
                        {
                            label: "Operaciones",
                            path: '/operaciones',
                        },
                        {
                            label: "Bandeja de mensajes",
                            path: '/bandeja'
                        }
                    ],
                    sidebarShow: true,
                    breadcrumb: [],
                    query: '',
                    searchSelected: false
                },
                methods: {
                    updateBreadcrumb() {
                        
                        if(this.$route.meta.breadcrumb == undefined){
                            this.breadcrumb = [];
                            return;
                        }

                        var breadcrumb = JSON.parse(JSON.stringify(this.$route.meta.breadcrumb));

                        breadcrumb.forEach(crumb => {
                            if(crumb.type == "dynamic") {
                                var key = crumb.label;
                                var dynamicLabel = this.$route.params[key];

                                if(dynamicLabel != undefined) {
                                    crumb.label = dynamicLabel;
                                    crumb.path = crumb.path.replace(key, dynamicLabel);
                                }
                            }
                        });
                        this.breadcrumb = breadcrumb;
                    },
                    search() {
                        console.log(this.query);
                    }
                },
                router: router,
                watch: {
                    $route(to, from) {
                        this.updateBreadcrumb();
                    }
                },
                mounted() {
                    this.updateBreadcrumb();
                }
            });
            
            function convertDate(date) {
                var dateParsed = new Date(Date.parse(date));
                return ('0' + dateParsed.getDate()).slice(-2) + '/'
                    + ('0' + (dateParsed.getMonth()+1)).slice(-2) + '/'
                    + dateParsed.getFullYear();
            }
        </script>
    </body>
</html>